plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id "org.openapi.generator" version "6.6.0"
	id "com.diffplug.spotless" version "6.21.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

spotless {
	java {
		// importOrder()
		removeUnusedImports()
		// googleJavaFormat()
		// formatAnnotations()
	}
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'com.h2database:h2'
	compileOnly 'io.swagger.core.v3:swagger-annotations:2.2.15'
	compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Springコードの生成先ディレクトリ定数
ext.GENERATED_SPRING_CODE_DIR="$buildDir/spring"

// APIドキュメント
task buildApiDoc(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName.set("html2")
	inputSpec.set("$rootDir/src/main/resources/api-schema.yaml")
	outputDir.set("$buildDir/apidoc")
}

// アプリケーションコード
task buildSpringServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName.set("spring")
	inputSpec.set("$rootDir/src/main/resources/api-schema.yaml")
	outputDir.set("$GENERATED_SPRING_CODE_DIR")
	outputs.dir("$GENERATED_SPRING_CODE_DIR")
	apiPackage.set("com.example.todoapi.controller")
	modelPackage.set("com.example.todoapi.model")
	configOptions.set([
		interfaceOnly: "true",
		useSpringBoot3: "true"
	])
}

// 既存のタスク（spotlessJava）に対して設定を追加する
tasks.named("spotlessJava").configure {
	dependsOn ":buildSpringServer"
	inputs.dir("$GENERATED_SPRING_CODE_DIR")
}

// buildSpringServerを実行後に、spotlessJavaApplyを実行する
tasks.buildSpringServer.finalizedBy tasks.spotlessJavaApply

// compileJavaを行う前に、buildSpringServerを実行する
compileJava.dependsOn tasks.buildSpringServer

// openapi.generatorで生成したコードをインポートできるようにする
sourceSets.main.java.srcDir "$buildDir/spring/src/main/java"
